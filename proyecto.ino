#include <Sodaq_DS3231.h>
#include <Wire.h> 
#include "U8glib.h"


U8GLIB_SSD1306_128X64 u8g(U8G_I2C_OPT_DEV_0 | U8G_I2C_OPT_NO_ACK | U8G_I2C_OPT_FAST); // Fast I2C / TWI


/////////////////////////////////////////////////para el menu los iconos y logos////////////////////////////////
//// 'icon_1', 16x16px
const unsigned char epd_bitmap_icon_1 [] PROGMEM = { //gladiolo
	0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x0e, 0x70, 0x0e, 0x70, 0x0e, 0x70, 0x0e, 0x70, 0x0e, 0x70, 
	0x0e, 0x70, 0x1f, 0xf8, 0x0e, 0x70, 0x0e, 0x70, 0x0e, 0x70, 0x0e, 0x70, 0x0e, 0x70, 0x00, 0x00
};
// 'icon_2', 16x16px
const unsigned char epd_bitmap_icon_2 [] PROGMEM = { //datos
	0x0f, 0xe0, 0x31, 0x18, 0x60, 0x0c, 0x40, 0x04, 0x81, 0x02, 0x81, 0x02, 0x81, 0x02, 0x81, 0x02, 
	0xc1, 0x06, 0x80, 0x82, 0x80, 0x42, 0x80, 0x22, 0x40, 0x04, 0x60, 0x0c, 0x31, 0x18, 0x0f, 0xe0
};
// 'icon_3', 16x16px
const unsigned char epd_bitmap_icon_3 [] PROGMEM = { // tomaco
 0x00, 0x00, 0x00, 0x08, 0x00, 0x94, 0x10, 0x08, 0x10, 0x00, 0x6c, 0x00, 0x10, 0x10, 0x10, 0x10, 
 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x10, 0x04, 0x10, 0x0a, 0x00, 0x04, 0x00, 0x00, 0x00
};
// 'icon_4 fireworks', 16x16px
const unsigned char epd_bitmap_icon_4 [] PROGMEM = { //esta es la imagen de reset cultivo
  0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0, 0x3f, 0xe0, 0x38, 0x70, 0x38, 0x70, 0x38, 0x70, 0x38, 0x60, 
	0x3f, 0xc0, 0x3b, 0x00, 0x39, 0x80, 0x38, 0xc0, 0x38, 0x60, 0x38, 0x60, 0x38, 0x70, 0x00, 0x00
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 1184)

const unsigned char* epd_bitmap_icons[4] = {
  epd_bitmap_icon_1,
	epd_bitmap_icon_2,
	epd_bitmap_icon_3,
  epd_bitmap_icon_4,  
};

// 'scrollbar_background', 8x64px
const unsigned char bitmap_scrollbar_background [] PROGMEM = {
  0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 
  0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 
  0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 
  0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00
};

// 'item_sel_outline', 128x21px
const unsigned char bitmap_item_sel_outline [] PROGMEM = {
  0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 
  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
  0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0
};



// ------------------ end generated bitmaps from image2cpp ---------------------------------



const int NUM_ITEMS = 4; // numero de items
const int MAX_ITEM_LENGTH = 20; // maximum characters for the item name

char menu_items [NUM_ITEMS] [MAX_ITEM_LENGTH] = {  // arreglo con los nombres
  { "Tomaco" }, 
  { "datos" },
  { "Gladiolo" },
  { "Reset cult" } 
  
};

#define BUTTON_UP_PIN 12 // pin for UP button 
#define BUTTON_SELECT_PIN 8 // pin for SELECT button
#define BUTTON_DOWN_PIN 4 // pin for DOWN button

//salidas
#define vegeta 5
#define flora 3
#define DEMO_PIN 2 // pin para modo directo
#define lampara 5



int button_up_clicked = 0; // only perform action when button is clicked, and wait until another press
int button_select_clicked = 0; // same as above
int button_down_clicked = 0; // same as above

int item_selected = 0; // which item in the menu is selected

int item_sel_previous; // previous item - used in the menu screen to draw the item before the selected one
int item_sel_next; // next item - used in the menu screen to draw next item after the selected one

int current_screen = 0;   // 0 = menu, 1 = referencia, 2 = saliendo
int demo_mode = 0; // when demo mode is set to 1, it automatically goes over all the screens, 0 = control menu with buttons
int demo_mode_state = 0; //  que pantalla eh item mostrar al principio
int demo_mode_delay = 0; // retraso del modo de demostración = utilizado para ralentizar el cambio de pantalla



void setup() {
  
  // define pins for buttons
  // INPUT_PULLUP means the button is HIGH when not pressed, and LOW when pressed
  // since it´s connected between some pin and GND
  pinMode(BUTTON_UP_PIN, INPUT_PULLUP); // up button
  pinMode(BUTTON_SELECT_PIN, INPUT_PULLUP); // select button
  pinMode(BUTTON_DOWN_PIN, INPUT_PULLUP); // down button
  pinMode(DEMO_PIN, INPUT_PULLUP);
  pinMode(7, INPUT_PULLUP);
  pinMode(lampara, OUTPUT);
 
}
  
void configuracionOled(void) {
  u8g.setFont(u8g_font_ncenB08);
  u8g.setFontRefHeightExtendedText();
  u8g.setDefaultForegroundColor();
  u8g.setFontPosTop();    
}

void loop() {

  if (digitalRead(DEMO_PIN) == LOW) {  ///si esta en 0
  demo_mode = 1; // enable demo mode  
  }
  else{
  demo_mode = 0; // disable demo mode
  }
    

  if (demo_mode == 1) { // cuando el modo de demostración está activo,
  activar_lampara();
  } // end demo mode section


 if (current_screen == 0) { // MENU SCREEN
   // up and down buttons only work for the menu screen
   if ((digitalRead(BUTTON_UP_PIN) == LOW) && (button_up_clicked == 0)) { // up button clicked - jump to previous menu item
     item_selected = item_selected - 1; // select previous item
     button_up_clicked = 1; // set button to clicked to only perform the action once
   if (item_selected < 0) { // if first item was selected, jump to last item
     item_selected = NUM_ITEMS-1;
   }
 }
 else if ((digitalRead(BUTTON_DOWN_PIN) == LOW) && (button_down_clicked == 0)) { // down button clicked - jump to next menu item
   item_selected = item_selected + 1; // select next item
   button_down_clicked = 1; // set button to clicked to only perform the action once
   if (item_selected >= NUM_ITEMS) { // last item was selected, jump to first menu item
     item_selected = 0;
    }
 } 

 if ((digitalRead(BUTTON_UP_PIN) == HIGH) && (button_up_clicked == 1)) { // unclick 
        button_up_clicked = 0;
 }
 if ((digitalRead(BUTTON_DOWN_PIN) == HIGH) && (button_down_clicked == 1)) { // unclick
   button_down_clicked = 0;
  }

 }
 if ((digitalRead(BUTTON_SELECT_PIN) == LOW) && (button_select_clicked == 0)) { // select button clicked, jump between screens
   button_select_clicked = 1; // set button to clicked to only perform the action once
   if (current_screen == 0) {current_screen = 1;} // menu items screen --> screenshots screen
   else if (current_screen == 1) {current_screen = 2;} // screenshots screen --> qr codes screen
   else {current_screen = 0;} // qr codes screen --> menu items screen
 }
 if ((digitalRead(BUTTON_SELECT_PIN) == HIGH) && (button_select_clicked == 1)) { // unclick 
     button_select_clicked = 0;
 }

 // set correct values for the previous and next items
 item_sel_previous = item_selected - 1;
 if (item_sel_previous < 0) {item_sel_previous = NUM_ITEMS - 1;} // previous item would be below first = make it the last
 item_sel_next = item_selected + 1;  
 if (item_sel_next >= NUM_ITEMS) {item_sel_next = 0;} // next item would be after last = make it the first
 u8g.firstPage(); // required for page drawing mode for u8g library
 
 
